 using System; using System.Collections.Generic; using System.Linq; using System.Net;
using System.Text;  using Android.App; using Android.Content; using Android.Graphics;
using Android.OS; using Android.Runtime; using Android.Support.V4.App; using Android.Util; using Android.Views; using Android.Widget; using BrightSign.Core.Models; using BrightSign.Core.Utility;
using BrightSign.Core.ViewModels;
using BrightSign.Droid.Views.Fragments.SearchUnits;
using MvvmCross.Binding.Droid.BindingContext; using MvvmCross.Binding.Droid.Views; using MvvmCross.Droid.Support.V4; using MvvmCross.Droid.Views.Attributes; using Square.Picasso;

namespace BrightSign.Droid.Views.Fragments.Snapshot {    // [MvxFragmentPresentation(typeof(MainViewModel), Resource.Id.content_frame, true)]     //[MvvmCross.Droid.Views.Attributes.MvxTabLayoutPresentation("Gallery", Resource.Id.viewPagerDevice, Resource.Id.tabsDevice, typeof(MainViewModel),addToBackStack:true)]     //[MvxFragmentPresentation(typeof(MainViewModel), Resource.Id.content_frame, true)]      public class SnapshotsFragment : MvxFragment<SnapshotsViewModel>, AdapterView.IOnItemClickListener     {         ImageButton btnHome;         Context context = Android.App.Application.Context;         SnapshotsDataViewAdapter mAdapter;         MvxGridView grid;          ImageButton btnLeft;         ImageButton btnRight;            public override void OnCreate(Bundle savedInstanceState)         {             base.OnCreate(savedInstanceState);              // Create your fragment here         }

		public override void OnViewCreated(View view, Bundle savedInstanceState)
		{
            base.OnViewCreated(view, savedInstanceState);
		}

		public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)         {             // Use this to return your custom view for this Fragment             // return inflater.Inflate(Resource.Layout.YourFragment, container, false);              base.OnCreateView(inflater, container, savedInstanceState);             var view = this.BindingInflate(Resource.Layout.SnapshotsView, null);              var toolbar = ((MainActivity)this.Activity).FindViewById(Resource.Id.toolbar);              ((MainActivity)this.Activity).HideAllIcons();              RegisterEvents();              ViewModel.SetItemSource();              ShowToolbarActions();                          var topView = view.FindViewById(Resource.Id.actions_top_view);             TextView deviceName = topView.FindViewById<TextView>(Resource.Id.top_device_name);             deviceName.Text = ViewModel.CurrentDevice?.Name;             TextView deviceIP = topView.FindViewById<TextView>(Resource.Id.top_device_ip);             deviceIP.Text = "IP Address:" + ViewModel.CurrentDevice?.IpAddress;             ImageView deviceImg = topView.FindViewById<ImageView>(Resource.Id.top_deviceImg);              grid = view.FindViewById<MvxGridView>(Resource.Id.gvSnapshots);              mAdapter = new SnapshotsDataViewAdapter(this.Activity, (IMvxAndroidBindingContext)BindingContext);             grid.Adapter = mAdapter;             grid.OnItemClickListener = this;               return view;         }          public void ShowToolbarActions()         {            var toolbar = ((MainActivity)this.Activity).FindViewById(Resource.Id.toolbar);            var btnShare = toolbar.FindViewById<ImageButton>(Resource.Id.btnShare);             btnShare.Visibility = ViewStates.Gone;                         //Commented Rotate functionality             var imgrotateLayout = toolbar.FindViewById<LinearLayout>(Resource.Id.rotateLayout);             imgrotateLayout.Visibility = ViewStates.Visible;             btnLeft = toolbar.FindViewById<ImageButton>(Resource.Id.btnRotateLeft);             btnRight = toolbar.FindViewById<ImageButton>(Resource.Id.btnRotateRight);              btnLeft.Click -= BtnLeft_Click;             btnRight.Click -= BtnRight_Click;              ////Registering Toolbar button Events              btnLeft.Click += BtnLeft_Click;             btnRight.Click += BtnRight_Click;          }          public void RegisterEvents()         {             try             {                 var toolbar = ((MainActivity)this.Activity).FindViewById(Resource.Id.toolbar);                 btnHome = toolbar.FindViewById<ImageButton>(Resource.Id.btnHome);                 btnHome.Click += btnHome_Click;                 if (btnLeft!=null)
                {                     btnLeft.Click -= BtnLeft_Click;                     btnRight.Click -= BtnRight_Click;  
                    btnLeft.Click += BtnLeft_Click;                     btnRight.Click += BtnRight_Click;
                }                             }             catch (Exception ex)             {                 Console.WriteLine(ex.Message);             }         }

		public override void OnPause()
		{
            base.OnPause(); 
		}

		public override void OnResume()
        {
            base.OnResume();             if (Constants.CurrentTab == TitleType.Gallery)             {
                ((MainActivity)this.Activity).ShowToolbarActions(3);
                 RegisterEvents();             }
        }         public override void OnDestroyView()         {             base.OnDestroyView();             grid.Adapter = null;             UnRegisterEvents();         }          public void UnRegisterEvents()         {             try             {                 btnHome.Click -= btnHome_Click;                 btnLeft.Click -= BtnLeft_Click;                 btnRight.Click -= BtnRight_Click;              }             catch (Exception ex)             {              }         }

        private void btnHome_Click(object sender, EventArgs e)
        {
            ViewModel.ChangeDeviceCommand.Execute();             Plugin.CurrentActivity.CrossCurrentActivity.Current.Activity.Finish();
        }

        void BtnLeft_Click(object sender, EventArgs e)         {             currentRotation = currentRotation - 1;             mAdapter.NotifyDataSetChanged();          }          void BtnRight_Click(object sender, EventArgs e)         {             currentRotation = currentRotation + 1;             mAdapter.NotifyDataSetChanged();         }

        public void OnItemClick(AdapterView parent, View view, int position, long id)
        {             UnRegisterEvents();
            ViewModel.OnItemSelected(ViewModel.SnapshotsItemSource.ElementAt(position));
        }

        static int currentRotation = Constants.SnapshotConfig.DisplayPortraitMode?1:0;         static float RotationTranslation = 0;         private class SnapshotsDataViewAdapter : MvxAdapter         {             SnapshotsViewModel mViewModel;             Context _context;             public SnapshotsDataViewAdapter(FragmentActivity context, IMvxAndroidBindingContext bindingContext) : base(context, bindingContext)             {                 mViewModel = bindingContext.DataContext as SnapshotsViewModel;                 _context = context;             }                          protected override View GetBindableView(View convertView, object dataContext, ViewGroup parent, int templateId)             {                  var item = (BSSnapshot)dataContext;                  DisplayMetrics metrics = new DisplayMetrics();                  IWindowManager windowManager = _context.GetSystemService(Context.WindowService).JavaCast<IWindowManager>();                     windowManager.DefaultDisplay.GetMetrics(metrics);                      var screenWidth = metrics.WidthPixels / metrics.Density;                  //int imageWidth = (int)((screenWidth) / 2);                  int imageWidth = (int)((metrics.WidthPixels -50) / 2);                   View row = convertView;                  LinearLayout linearLayout = new LinearLayout(_context);                 linearLayout.LayoutParameters = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MatchParent, LinearLayout.LayoutParams.WrapContent)                 {                     Gravity = GravityFlags.CenterHorizontal | GravityFlags.Top                 };                  ImageView imgView = null;                             if ((currentRotation % 2) == 1 || (currentRotation % 2) == -1)                             {                                           imgView = new ImageView(_context);                     imgView.LayoutParameters = new LinearLayout.LayoutParams(imageWidth, imageWidth+200)                     {                         Gravity = GravityFlags.CenterHorizontal | GravityFlags.Top,                      };                     imgView.SetForegroundGravity(GravityFlags.CenterHorizontal);                     //imgView.Rotation = currentRotation * 90;                     imgView.SetScaleType(ImageView.ScaleType.FitXy);                     linearLayout.AddView(imgView);                      Picasso.With(Android.App.Application.Context).Load("file://" + item.ImageDataObj.ImagePath).Config(Bitmap.Config.Rgb565).Rotate(currentRotation * 90).Fit().Into(imgView);                     //if (item.IsCredentialsRequired)
                    //{                     //    Picasso.With(Android.App.Application.Context).Load("file://" + item.ImageDataObj.ImagePath).Config(Bitmap.Config.Rgb565).Rotate(currentRotation * 90).Fit().Into(imgView);                     //}                     //else
                    //{
                    //    Picasso.With(Android.App.Application.Context).Load(item.ImageDataObj.ImageUrl).Rotate(currentRotation * 90).Fit().Into(imgView);                     //}                 }                             else{                                           imgView = new ImageView(_context);                     imgView.LayoutParameters = new LinearLayout.LayoutParams(imageWidth, imageWidth - 200)                     {                         Gravity = GravityFlags.CenterHorizontal | GravityFlags.Top,                      };                     imgView.SetForegroundGravity(GravityFlags.CenterHorizontal);                     imgView.SetScaleType(ImageView.ScaleType.FitXy);                     //imgView.Rotation = currentRotation * 90;                     linearLayout.AddView(imgView);                      Picasso.With(Android.App.Application.Context).Load("file://" + item.ImageDataObj.ImagePath).Config(Bitmap.Config.Rgb565).Rotate(currentRotation * 90).Fit().Into(imgView);                      //if (item.IsCredentialsRequired)                      //{                     //    Picasso.With(Android.App.Application.Context).Load("file://" + item.ImageDataObj.ImagePath).Config(Bitmap.Config.Rgb565).Rotate(currentRotation * 90).Fit().Into(imgView);                     //}                     //else                     //{                     //    Picasso.With(Android.App.Application.Context).Load(item.ImageDataObj.ImageUrl).Rotate(currentRotation * 90).Fit().Into(imgView);                     //}                                               }                   row = linearLayout;                 return row;              }                  private Bitmap GetImageBitmapFromUrl(string url)             {                 Bitmap imageBitmap = null;                  using (var webClient = new WebClient())                 {                     var imageBytes = webClient.DownloadData(url);                     if (imageBytes != null && imageBytes.Length > 0)                     {                         imageBitmap = BitmapFactory.DecodeByteArray(imageBytes, 0, imageBytes.Length);                     }                 }                     return imageBitmap;                 //else                // return resizeAndRotate(imageBitmap,imageBitmap.Width,imageBitmap.Height);             }              public Bitmap resizeAndRotate(Bitmap image, int width, int height)             {                 var matrix = new Matrix();                 var scaleWidth = ((float)width) / image.Width;                 var scaleHeight = ((float)height) / image.Height;                 matrix.PostRotate(RotationTranslation);                 matrix.PreScale(scaleWidth, scaleHeight);                 return Bitmap.CreateBitmap(image, 0, 0, image.Width, image.Height, matrix, true);             }           }     } }  